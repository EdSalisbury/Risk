
    # Place troops
    # Placement rules:
    #
    # Territory exposure value:
    # Determine how vulnerable a territory is
    # Factors:
    #   Minimum of 2 troops on any exposed territory
    #   Calculate exposure:
    #   Go through adjacencies
    #      If adjancent territory is not owned by the player, it's exposed
    #      Add up enemy troops in adjancecies, subtract the player troops
    #   Should a territory's value come into play?
    # If not exposed, then 1 troop is fine

# Determine exposure for each territory

# Win chance threshold (TODO: make configurable)
win_chance_min = 0.7

# Determine move list
for player in players:
    print move_list(player['id'], win_chance_min)

# Generate a new state based on a move
# Need a function to get board position, given a passed state
# Get pre-move board state, save for that tier - add to a graph
# How to creat a tree -- use a series of dicts
# Index each state - something like level#-move#
# Have a dict of states with that index being the key
# Add exposure ratings to score (subtract?)

# Multiple phases:
#   Placement
#   Attack
#   Fortify - move from 1 territory to an adjacent (leaving one behind)

# Thus, in the most common case (3 dice vs 2 dice), the attacker loses an average of 0.921 armies
#  to the defender's 1.079, which is a ratio of about 6 to 7 (corrected in FAQ 5.6, previous versions gave 5 to 6 here).

# Create a board state dict

# state = dict()
# state['players'][player_id] = {"territories": [2, 4, 6], "continents": [1, 3, 5], "score": 0, "troops": 0}
# state['troops'] = [5, 2, 5, 4, 2... ]
# state['exposure'] = [0, 2, 5, 3, ...]