
    # Place troops
    # Placement rules:
    #
    # Territory exposure value:
    # Determine how vulnerable a territory is
    # Factors:
    #   Minimum of 2 troops on any exposed territory
    #   Calculate exposure:
    #   Go through adjacencies
    #      If adjancent territory is not owned by the player, it's exposed
    #      Add up enemy troops in adjancecies, subtract the player troops
    #   Should a territory's value come into play?
    # If not exposed, then 1 troop is fine

# Determine exposure for each territory

# Win chance threshold (TODO: make configurable)
win_chance_min = 0.7

# Determine move list
for player in players:
    print move_list(player['id'], win_chance_min)

# Generate a new state based on a move
# Need a function to get board position, given a passed state
# Get pre-move board state, save for that tier - add to a graph
# How to creat a tree -- use a series of dicts
# Index each state - something like level#-move#
# Have a dict of states with that index being the key
# Add exposure ratings to score (subtract?)

# Multiple phases:
#   Placement
#   Attack
#   Fortify - move from 1 territory to an adjacent (leaving one behind)

# Thus, in the most common case (3 dice vs 2 dice), the attacker loses an average of 0.921 armies
#  to the defender's 1.079, which is a ratio of about 6 to 7 (corrected in FAQ 5.6, previous versions gave 5 to 6 here).

# Create a board state dict

# state = dict()
# state['players'][player_id] = {"territories": [2, 4, 6], "continents": [1, 3, 5], "score": 0, "troops": 0}
# state['troops'] = [5, 2, 5, 4, 2... ]
# state['exposure'] = [0, 2, 5, 3, ...]


    # example:
    # 3 territories
    # 3 troops
    # (0, 0, 3)
    # (0, 1, 2)
    # (0, 2, 1)
    # (0, 3, 0)
    # (1, 0, 2)
    # (1, 1, 1)
    # (1, 2, 0)
    # (2, 0, 1)
    # (2, 1, 0)
    # (3, 0, 0)

    # 2 choose 1
    # (0, 1)
    # (1, 0)

    # 2 choose 2
    # (1, 1)
    # (2, 0)
    # (0, 2)

    # 2 choose 3
    # (3, 0)
    # (2, 1)
    # (1, 2)
    # (0, 3)

    # 3 choose 1
    # (1, 0, 0)
    # (0, 1, 0)
    # (0, 0, 1)

    # 3 choose 2
    # (2, 0, 0)
    # (1, 1, 0)
    # (0, 1, 1)
    # (0, 2, 0)
    # (0, 0, 2)

    # (0, 0, 2)
    # (0, 1, 1)
    # (1, 0, 1)
    # (1, 1, 0)
    # (2, 0, 0)
    # (0, 2, 0)

    # What about if you set a max, so like:
    # max = 2, total = 2
    # (0, 0, 2)
    # (0, 2, 0)
    # (2, 0, 0)
    # max = 1, total = 2
    # (1, 1, 0)
    # (1, 0, 1)
    # (0, 1, 1)

    # 3 choose 1
    # max = 1, total = 1
    # (0, 0, 1)
    # (0, 1, 0)
    # (1, 0, 0)

    # Fix one column to be the max

    # 3 choose 3
    # max = 3, total = 3
    # (0, 0, 3)
    # (0, 3, 0)
    # (3, 0, 0)
    # max = 2, total = 3
    # (2, 0, 1)
    # (2, 1, 0)

    # (1, 2, 0)
    # (0, 2, 1)

    # (0, 1, 2)
    # (1, 0, 2)

    # max = 1, total = 3
    # (1, 1, 1)

    # Can we go recursively?
    # permute(n, m, max)
    # permute(3, 3, 3)
    # [[0, 0, 3], [0, 3, 0], [3, 0, 0]]
    # permute(3, 3, 2)
    # [[2, 1, 0], [2, 0, 1], [0, 2, 1], [1, 2, 0], [0, 1, 2], [1, 0, 2]]
    # []0, 1], [1, 0]] - filled in for each permutation 2 choose 1
    # permute(3, 3, 1)
    # [[1, 1, 1]]





    # Idea:
    # There are 3 possibilities
    # (3, 0, 0)
    # (1, 2, 0)
    # (1, 1, 1)
    # For 4 choose 4:
    # (4, 0, 0, 0)
    # (3, 1, 0, 0)
    # (2, 1, 1, 0)
    # (1, 1, 1, 1)

    # 4 choose 3
    # (3, 0, 0, 0)
    # (2, 1, 0, 0)
    # (1, 1, 1, 0)

    # 3 Choose 4
    # (4, 0, 0)
    # (3, 1, 0)
    # (2, 1, 1)
    # (2, 2, 0)

    # How to get all different ordering?

    # All combinations is dumb for troop deployment (so many options), so therefore, we need a better method
    # Go through each territory, get exposure
    # First priority, get exposure down to 0
    # We could still use the permutations, by only evalutating those territories that are viable for attacking, maybe
    # Another option - all or nothing - take all of those that are left, and put them only on *one* territory
    # Exposed territories (reduced from all owned)
    # Only troops that are left from fixing the exposure
    # The player will always be looking to defend (no sacrificing)
    # Based on minimax, it would choose the best territory to place all of the remaining troops on, due to the exposure
    # But not necessarily the best strategic territories to choose
    # Maybe if you can look at what are the most strategic territories to capture, ignoring the percentages?
    # multiple passes - take one pass that would just choose the territories it thinks are the best, and make a list of
    # targets, prioritized by highest to lowest
    # Maybe finding out which owned territories are the closest to the most desired territories
    # Need a distance map, using adjacencies - that's easy to calculate
    # What about most valuable adjacent territory?
    # Place all remaining troops on owned adjacent territory
    # Done - move to attacks

